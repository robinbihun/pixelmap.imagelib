import PixelMapImage from '../PixelMapImage';

test('Can create pixelMapImage with valid legacy data', () => {
  let legacyData =
    '390390390390390390390000000390390390390390390390390390390390390390000FF0FF0000390390390390390390390390390390390390000FF0FF0000390390390390390390390390390390390000FF0FF0FF0F' +
    'F0000390390390390390000000000000000000FF0FF0FF0FF0000000000000000000000FF0FF0FF0FF0FF0FF0FF0FF0FF0FF0FF0FF0FF0FF0000390000FF0FF0FF0FF0000FF0FF0000FF0FF0FF0FF000039039039000' +
    '0FF0FF0FF0000FF0FF0000FF0FF0FF0000390390390390390000FF0FF0000FF0FF0000FF0FF0000390390390390390390000FF0FF0FF0FF0FF0FF0FF0FF0000390390390390390000FF0FF0FF0FF0FF0FF0FF0FF0FF0' +
    'FF0000390390390390000FF0FF0FF0FF0FF0FF0FF0FF0FF0FF0000390390390000FF0FF0FF0FF0FF0000000FF0FF0FF0FF0FF0000390390000FF0FF0FF0000000390390000000FF0FF0FF0000390000FF0FF00000003' +
    '90390390390390390000000FF0FF0000000000000390390390390390390390390390390000000000';

  let pixelMapImage = PixelMapImage.fromLegacyImageData(legacyData);

  // We reduced each color from 3 characters to two.
  expect(pixelMapImage.toString()).toBe(
    '3636363636363600003636363636363636363636363600d2d20036363636363636363636363600d2d200363636363636363636363600d2d2d2d2003636363636000000000000d2d2d2d200000000000000d2d' +
    '2d2d2d2d2d2d2d2d2d2d2d2d2003600d2d2d2d200d2d200d2d2d2d20036363600d2d2d200d2d200d2d2d200363636363600d2d200d2d200d2d20036363636363600d2d2d2d2d2d2d2d200363636363600d2d2d2d2d2d' +
    '2d2d2d2d2003636363600d2d2d2d2d2d2d2d2d2d20036363600d2d2d2d2d20000d2d2d2d2d200363600d2d2d2000036360000d2d2d2003600d2d200003636363636360000d2d20000000036363636363636363636000000');
});

test('Should throw an error if invalid legacy data used to create pixelMapImage', () => {
  expect(() => PixelMapImage.fromLegacyImageData('123456')).toThrow('Invalid legacy image data');
  let invalidLegacyData =
    'aaa390390390390390390000000390390390390390390390390390390390390390000FF0FF0000390390390390390390390390390390390390000FF0FF0000390390390390390390390390390390390000FF0FF0FF0F' +
    'F0000390390390390390000000000000000000FF0FF0FF0FF0000000000000000000000FF0FF0FF0FF0FF0FF0FF0FF0FF0FF0FF0FF0FF0FF0000390000FF0FF0FF0FF0000FF0FF0000FF0FF0FF0FF000039039039000' +
    '0FF0FF0FF0000FF0FF0000FF0FF0FF0000390390390390390000FF0FF0000FF0FF0000FF0FF0000390390390390390390000FF0FF0FF0FF0FF0FF0FF0FF0000390390390390390000FF0FF0FF0FF0FF0FF0FF0FF0FF0' +
    'FF0000390390390390000FF0FF0FF0FF0FF0FF0FF0FF0FF0FF0000390390390000FF0FF0FF0FF0FF0000000FF0FF0FF0FF0FF0000390390000FF0FF0FF0000000390390000000FF0FF0FF0000390000FF0FF00000003' +
    '90390390390390390000000FF0FF0000000000000390390390390390390390390390390000000000';
  expect(() => PixelMapImage.fromLegacyImageData(invalidLegacyData)).toThrow('Image data contains invalid color, not in web safe color space');
});

test('Cannot create pixelMapImage with invalid pixel data size', () => {
  let invalidData: string[] = ['aa','aa']

  expect(() => new PixelMapImage(invalidData)).toThrow('Invalid Pixel Data Size, must be 16x16 pixels for a length of 256')
});